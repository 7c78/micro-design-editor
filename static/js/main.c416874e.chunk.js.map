{"version":3,"sources":["components/navigationBar/editor.js","components/navigationBar/preview.js","components/navigationBar/index.js","components/search/editor.js","components/search/constants.js","components/search/preview.js","components/search/index.js","components/notice/editor.js","components/notice/preview.js","components/notice/index.js","App.js","serviceWorker.js","index.js"],"names":["Editor","this","props","value","showError","validation","className","getMetaProperty","error","title","required","label","Input","onChange","onInputChange","onBlur","onInputBlur","name","Promise","resolve","errors","trim","length","DesignEditor","designType","designDescription","React","memo","type","editor","preview","Preview","dragable","appendable","editable","configurable","highlightWhenSelect","placeholder","e","target","maxLength","settings","globalConfig","style","width","readOnly","icon","content","Alert","href","rel","groupedComponents","navigationBarConf","Design","group","searchConf","noticeConf","App","state","getInitialValue","newValue","setState","onSettingsChange","newSettings","saveDesign","instance","design","getDecoratedComponentInstance","cache","readCache","Array","isArray","onFormSubmit","validate","then","data","_cloneDeep","stringify","JSON","console","log","markAsSaved","Notify","success","catch","validations","warning","ref","cacheId","confirmUnsavedLeave","components","scrollTopOffset","window","_global","Button","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kYAIqBA,E,iLACT,IAAD,EACkCC,KAAKC,MAAtCC,EADD,EACCA,MAAOC,EADR,EACQA,UAAWC,EADnB,EACmBA,WAE1B,OACE,yBAAKC,UAAU,uCACb,kBAAC,IAAD,CACEF,UAAWA,GAAaH,KAAKM,gBAAgB,QAAS,WACtDC,MAAOH,EAAWI,MAClBC,UAAQ,EACRC,MAAM,6BAEN,kBAACC,EAAA,EAAD,CACET,MAAOA,EAAMM,MACbI,SAAUZ,KAAKa,cACfC,OAAQd,KAAKe,YACbC,KAAK,e,yCAUb,MAAO,CACLR,MAAO,kB,kCAIiB,IAAVA,EAAS,EAATA,MAChB,OAAO,IAAIS,SAAQ,SAAAC,GACjB,IAAMC,EAAS,GACVX,GAAUA,EAAMY,OAEVZ,EAAMa,OAAS,KACxBF,EAAOX,MAAQ,gFAFfW,EAAOX,MAAQ,6CAKjBU,EAAQC,U,GAxCsBG,KAAfvB,EAuBZwB,WAAa,gBAvBDxB,EAwBZyB,kBAAoB,2BC1B7B,IAWeC,MAAMC,MAXL,YAAsB,IAAVxB,EAAS,EAATA,MAE1B,OACE,yBAAKG,UAAU,wCACb,yBAAKA,UAAU,+CACXH,EAAMM,WCHD,G,OAAA,CACbmB,KAAM5B,EAAOwB,WACbK,OAAQ7B,EACR8B,QAASC,EAETC,UAAU,EAGVC,YAAY,EAGZC,UAAU,EAEVC,cAAc,EAEdC,qBAAqB,ICdFpC,E,iLAiBT,IAAD,EAC4CC,KAAKC,MAAhDC,EADD,EACCA,MAAOC,EADR,EACQA,UAAWC,EADnB,EACmBA,WAAYQ,EAD/B,EAC+BA,SAEtC,OACE,6BACE,kBAAC,IAAD,CACEF,MAAM,sBACND,UAAQ,EACRN,UAAWA,GAAaH,KAAKM,gBAAgB,cAAe,WAC5DC,MAAOH,EAAWgC,aAElB,kBAACzB,EAAA,EAAD,CACEK,KAAK,cACLoB,YClCe,2BDmCflC,MAAOA,EAAMkC,YACbxB,SAAU,SAAAyB,GAAC,OAAIzB,EAAS,CAAEwB,YAAaC,EAAEC,OAAOpC,SAChDY,OAAQd,KAAKe,YACbwB,UAAW,U,uCA9BEC,EAAUC,GAC/B,MAAO,CACLL,YAAa,M,iCAKf,OAAO,IAAInB,SAAQ,SAAAC,GAEjBA,W,GAb8BI,KAAfvB,EAEZwB,WAAa,SAFDxB,EAGZyB,kBAAoB,eEJ7B,IAeeC,MAAMC,MAfL,SAAUzB,GAAQ,IACxBC,EAAUD,EAAVC,MAER,OACE,yBAAKG,UAAU,yBACb,kBAACM,EAAA,EAAD,CACEyB,YAAalC,EAAMkC,aDTA,2BCUnBM,MAAO,CAAEC,MAAO,QAChBC,UAAQ,EACRC,KAAK,eCTE,G,OAAA,CACblB,KAAM5B,EAAOwB,WACbK,OAAQ7B,EACR8B,QAASC,ICHU/B,E,iLAgBT,IACAG,EAAUF,KAAKC,MAAfC,MAER,OACE,6BACE,kBAAC,IAAD,CACEQ,MAAM,6BAEN,kBAACC,EAAA,EAAD,CACEgB,KAAK,OACLX,KAAK,UACLd,MAAOA,EAAM4C,QACblC,SAAUZ,KAAKa,qB,yCAvBvB,MAAO,CACLiC,QAAS,0C,iCAKX,OAAO,IAAI7B,SAAQ,SAAAC,GACjBA,W,GAZ8BI,KAAfvB,EAEZwB,WAAa,SAFDxB,EAGZyB,kBAAoB,e,aCUdC,MAAMC,MAdL,YAAsB,IAAVxB,EAAS,EAATA,MAE1B,OACE,yBAAKG,UAAU,yBACb,kBAAC0C,EAAA,EAAD,KACE,8BAAQ7C,EAAM4C,SACd,uBAAGE,KAAK,qDAAqDC,IAAI,sBAAsBX,OAAO,UAA9F,iCCLO,G,OAAA,CACbX,KAAM5B,EAAOwB,WACbK,OAAQ7B,EACR8B,QAASC,I,kBCGLoB,EAAoB,CACxBC,EAEAC,IAAOC,MAAM,gBACbC,EACAC,EAEAH,IAAOC,MAAM,gBACbC,GA2EaE,E,2MAvEbC,MAAQ,CACNvD,MAAO,CAAC,aAEJyB,KAAMwB,EAAkBxB,MACrBwB,EAAkBvB,OAAO8B,qB,EAKlC9C,SAAW,SAAA+C,GACT,EAAKC,SAAS,CAAE1D,MAAOyD,K,EAGzBE,iBAAmB,SAAAC,GACjB,EAAKF,SAAS,CAAEpB,SAAUsB,K,EAM5BC,WAAa,SAAAC,GACX,EAAKC,OAASD,GAAYA,EAASE,gCAGnC,IAAMC,EAAQ,EAAKF,QAAU,EAAKA,OAAOG,YACrCC,MAAMC,QAAQH,IAChB,EAAKP,SAAS,CAAE1D,MAAOiE,K,EAI3BI,aAAe,WACb,EAAKN,OAAOO,WACXC,MAAK,WAEJ,IAAIC,EAAOC,IAAW,EAAKlB,MAAMvD,OAC3B0E,EAAYC,KAAKD,UAAUF,EAAM,KAAM,GAC7CI,QAAQC,IAAIH,GAGZ,EAAKX,OAAOe,cACZC,IAAOC,QAAQ,+BAEhBC,OAAM,SAAAC,GACLH,IAAOI,QAAQ,gE,wEAKjB,OACE,yBAAKhF,UAAU,eACb,kBAAC,IAAD,CACEiF,IAAKtF,KAAK+D,WACVI,OAAK,EACLoB,QAAQ,eACRC,qBAAqB,EACrBC,WAAYvC,EACZhD,MAAOF,KAAKyD,MAAMvD,MAClBU,SAAUZ,KAAKY,SACf4B,SAAUxC,KAAKyD,MAAMjB,SACrBqB,iBAAkB7D,KAAK6D,iBACvB6B,iBAAkB,IAClBjD,aAAckD,OAAOC,UAEvB,yBAAKvF,UAAU,wBACb,kBAACwF,EAAA,EAAD,CAAQlE,KAAK,UAAUmE,QAAS9F,KAAKuE,cAArC,wC,GAjEQwB,aCTEC,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.c416874e.chunk.js","sourcesContent":["import React from 'react';\nimport { Input } from 'zent';\nimport { DesignEditor, ControlGroup } from 'micro-design-editor/es/editor/DesignEditor';\n\nexport default class Editor extends DesignEditor {\n  render() {\n    const { value, showError, validation } = this.props;\n\n    return (\n      <div className=\"zent-design-component-config-editor\">\n        <ControlGroup\n          showError={showError || this.getMetaProperty('title', 'touched')}\n          error={validation.title}\n          required\n          label=\"页面标题:\"\n        >\n          <Input\n            value={value.title}\n            onChange={this.onInputChange}\n            onBlur={this.onInputBlur}\n            name=\"title\"\n          />\n        </ControlGroup>\n      </div>\n    );\n  }\n\n  static designType = 'navigationBar';\n  static designDescription = '页面标题';\n  static getInitialValue() {\n    return {\n      title: '标题'\n    };\n  }\n\n  static validate({ title }) {\n    return new Promise(resolve => {\n      const errors = {};\n      if (!title || !title.trim()) {\n        errors.title = '请填写页面标题';\n      } else if (title.length > 10) {\n        errors.title = '页面标题长度不能多于 10 个字';\n      }\n\n      resolve(errors);\n    });\n  }\n}\n","import React from 'react';\n\nconst Preview = function ({ value }) {\n\n  return (\n    <div className=\"zent-design-component-config-preview\">\n      <div className=\"zent-design-component-config-preview__title\">\n        { value.title }\n      </div>\n    </div>\n  )\n};\n\nexport default React.memo(Preview);\n","import Editor from './editor';\nimport Preview from './preview';\nimport './style.scss';\n\nexport default {\n  type: Editor.designType,\n  editor: Editor,\n  preview: Preview,\n  // 是否可以拖拽\n  dragable: false,\n\n  // 是否出现在底部的添加组件区域\n  appendable: false,\n\n  // 是否可以编辑，UMP里面有些地方config是不能编辑的\n  editable: true,\n\n  configurable: false,\n\n  highlightWhenSelect: false\n};\n","import React from 'react';\nimport { Input } from 'zent';\nimport { DesignEditor, ControlGroup } from 'micro-design-editor/es/editor/DesignEditor';\nimport { PLACEHOLDER } from './constants';\n\nexport default class Editor extends DesignEditor {\n\n  static designType = 'search';\n  static designDescription = '搜索';\n  static getInitialValue(settings, globalConfig) {\n    return {\n      placeholder: ''\n    };\n  }\n\n  static validate() {\n    return new Promise(resolve => {\n      // 一旦传入对象即抛出异常\n      resolve();\n    });\n  }\n\n  render() {\n    const { value, showError, validation, onChange } = this.props;\n\n    return (\n      <div>\n        <ControlGroup\n          label=\"占位符:\"\n          required\n          showError={showError || this.getMetaProperty('placeholder', 'touched')}\n          error={validation.placeholder}\n        >\n          <Input\n            name=\"placeholder\"\n            placeholder={PLACEHOLDER}\n            value={value.placeholder}\n            onChange={e => onChange({ placeholder: e.target.value })}\n            onBlur={this.onInputBlur}\n            maxLength={50}\n          />\n        </ControlGroup>\n      </div>\n    );\n  }\n}\n","\nexport const PLACEHOLDER = '搜索商品';\n","import React from 'react';\nimport { Input } from 'zent';\nimport { PLACEHOLDER } from './constants';\n\nconst Preview = function (props) {\n  const { value } = props;\n\n  return (\n    <div className=\"design-search-preview\">\n      <Input\n        placeholder={value.placeholder || PLACEHOLDER}\n        style={{ width: '100%' }}\n        readOnly\n        icon=\"search\"\n      />\n    </div>\n  )\n};\n\nexport default React.memo(Preview);\n","import Editor from './editor';\nimport Preview from './preview';\nimport './style.scss';\n\nexport default {\n  type: Editor.designType,\n  editor: Editor,\n  preview: Preview\n};\n","import React from 'react';\nimport { Input } from 'zent';\nimport { DesignEditor, ControlGroup } from 'micro-design-editor/es/editor/DesignEditor';\n\nexport default class Editor extends DesignEditor {\n\n  static designType = 'notice';\n  static designDescription = '公告';\n  static getInitialValue() {\n    return {\n      content: '通知提示文案'\n    };\n  }\n\n  static validate() {\n    return new Promise(resolve => {\n      resolve();\n    });\n  }\n\n  render() {\n    const { value } = this.props;\n\n    return (\n      <div>\n        <ControlGroup\n          label=\"提示文案:\"\n        >\n          <Input\n            type=\"text\"\n            name=\"content\"\n            value={value.content}\n            onChange={this.onInputChange}\n          />\n        </ControlGroup>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Alert } from 'zent';\n\nconst Preview = function ({ value }) {\n\n  return (\n    <div className=\"design-notice-preview\">\n      <Alert>\n        <span>{ value.content }</span>\n        <a href=\"https://github.com/xjh22222228/micro-design-editor\" rel=\"noopener noreferrer\" target=\"_blank\">\n          文字链接\n        </a>\n      </Alert>\n    </div>\n  )\n};\n\nexport default React.memo(Preview);\n","import Editor from './editor';\nimport Preview from './preview';\nimport './style.scss';\n\nexport default {\n  type: Editor.designType,\n  editor: Editor,\n  preview: Preview\n};\n","import React, { Component } from 'react';\nimport './app.css';\nimport 'micro-design-editor/css/index.css';\nimport Design from 'micro-design-editor/es/index';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport navigationBarConf from './components/navigationBar';\nimport searchConf from './components/search';\nimport noticeConf from './components/notice';\nimport { Button, Notify } from 'zent';\n\nconst groupedComponents = [\n  navigationBarConf,\n\n  Design.group('基础'),\n  searchConf,\n  noticeConf,\n\n  Design.group('其他'),\n  searchConf,\n];\n\nclass App extends Component {\n  state = {\n    value: [\n      {\n        type: navigationBarConf.type,\n        ...navigationBarConf.editor.getInitialValue()\n      }\n    ]\n  };\n\n  onChange = newValue => {\n    this.setState({ value: newValue });\n  }\n\n  onSettingsChange = newSettings => {\n    this.setState({ settings: newSettings });\n  }\n\n  /**\n   * @param {Design} instance - Design 组件的实例, 用于调用组件里的方法\n   */\n  saveDesign = instance => {\n    this.design = instance && instance.getDecoratedComponentInstance();\n\n    // 恢复上一次未保存数据\n    const cache = this.design && this.design.readCache();\n    if (Array.isArray(cache)) {\n      this.setState({ value: cache });\n    }\n  }\n\n  onFormSubmit = () => {\n    this.design.validate()\n    .then(() => {\n      // 如果需要对数据处理，需要对原数据进行拷贝\n      let data = _cloneDeep(this.state.value);\n      const stringify = JSON.stringify(data, null, 2);\n      console.log(stringify);\n      // 标记为以保存状态，如果使用了缓存或者离开提示需要手动调用这个函数通知 Design 更改已经保存\n      // localStorage 将被清除\n      this.design.markAsSaved();\n      Notify.success('保存成功');\n    })\n    .catch(validations => {\n      Notify.warning('保存失败, 请检查配置');\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"design-page\">\n        <Design\n          ref={this.saveDesign}\n          cache\n          cacheId=\"micro-design\"\n          confirmUnsavedLeave={false}\n          components={groupedComponents}\n          value={this.state.value}\n          onChange={this.onChange}\n          settings={this.state.settings}\n          onSettingsChange={this.onSettingsChange}\n          scrollTopOffset={-270}\n          globalConfig={window._global}\n        />\n        <div className=\"design-bottom-action\">\n          <Button type=\"primary\" onClick={this.onFormSubmit}>保存并继续</Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'zent/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}